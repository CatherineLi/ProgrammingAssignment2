makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x=1:5)
makevector(x=1)
makeVector(x=1)
set(2)
x=1:10
makeVector(x)
cachemean(x,...)
cachemean(x)
cachemean(x)
cachemean(makeVector(x))
cachemean(makeVector(x))
cachemean(makeVector(1:20))
x=1:10
x<-1:10
cachemean(makeVector(1:10))
cachemean(makeVector(x))
m<-makeVector(x)$getmean()
m
is.null
? is.null()
! is.null()
is.null(m)
data<-makeVector$get()
data<-makeVector$get()
data<-makeVector(x)$get()
data
m<-mean(data)
m
makeVector(x)$setmean(m)
ans
makeVector(x)$setmean(m)
m
cachemean(makeVector(1:10))
x<-makeVector(1:10)
x
m<-x$getmean()
m
m
is.null(null)
is.null(NULL)
is.null(m)
return(m)
return(m)
data<-x$get()
data
x
data
m<-mean(data)
x$setmean(m)
m
m
x
x$getmean()
is.null(m)
cachemean(makeVector(1:10))
return(m)
cachemean(makeVector(1:10))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:10))
cachemean(makeVector(1:10))
cachemean(makeVector(1:10))
? return
ma<-matrix(1:20, 4, 5)
ma
solve(ma)
ima<-solve(ma)
ma<-matrix(1:16, 4, 4)
solve(ma)
ma<-matrix(1:6, 2,3)
solve(ma)
ma
catherine<-matrix(1:4, 2,2)
catherine
solve(catherine)
catherine %*% catherine
catherine %*% solve(catherine)
cacheSolve(makeCacheMatrix(catherine))
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than computing it repeatedly
## This function generates a list of four functions including set, get,
## setinverse and getinverse.
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y){
x<<-y
i<<-NULL
}
get<-function() {
x
}
setinverse<-function(inverse){
i<<-inverse
}
getinverse<-function(){
i
}
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
## This function check whether computes the inverse of the
# special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$getinverse()
if(! is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
catherine
cacheSolve(makeCacheMatrix(catherine))
solve(catherine)
cacheSolve(makeCacheMatrix(catherine))
cacheSolve(makeCacheMatrix(catherine))
catherine3<-matrix(1:3, 3,3)
catherine3
cacheSolve(makeCacheMatrix(catherine3))
catherine3<-matrix(1:9, 3, 3)
catherine3
solve(catherine3)
firstcol<-1:3
seccol<-1:3
catherine3<-cbind(firstcol, seccol)
catherine3
seccol<-1:2
firstcol<-9:10
catherine3
catherine3<-cbind(firstcol, seccol)
catherine3
solve(catherine3)
cacheSolve(makeCacheMatrix(catherine3))
catherine<-matrix(1:4, 2, 2)
source('C:/Users/qli/Desktop/20140917  R/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(catherine))
